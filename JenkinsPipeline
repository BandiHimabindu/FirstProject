pipeline{
    agent {
        kubernetes{
            yaml '''
              spec:
                containers:
                - name: jdk
                  image: akscontainerregistry01s9s9s.azurecr.io/javaimage:latest
                  command:
                  - cat
                  tty: true
                '''
        }
    }
    /* tools*/
    stages{
        stage('Declarative: Checkout SCM'){
            steps{

            }
        }
        stage('Git Checkout'){
            steps{

                git credentialsId: 'skc-pat'' url: 'https://github.com/BandiHimabindu/Devops

            }

          
        }
        stage("Maven Build"){
            steps{
                container('jdk'){
                    sh 'mvn clean install'
                }
            }
       }
        stage('SonarQube Analysis'){
            environment {
                SCANNER_HOME = TOOL 'SonarQudescanner'
                PROJECT_NAME = "Test-Project"
            }
            steps{
                container('jdk'){
                    withSonarQubeEnv('SonarQube'){
                        echo "$SCANNER_HOME"
                        sh '''$SCANNER_HOME/bin/sonar-scanner -X -Dsonar.java.binaries=. \
                        -Dsonar.projectkey=$PROJECT_NAME -Dsonar.language=java \
                        -Dsonar.java.source=1.11 \
                        -Dsonar.sources=.'''
                    }
                }
            }

        }
        stage('Quality Gate'){
            steps{


                timeout(time: 5, unit: 'MINUTES'){
                    waitForQualityGate abortPipeline: false
                }
            }

        }
        stage('Artifactory Server'){
            steps{
                rtServer (
                    id: "jfArtifactory",
                    url: 'http://artifactory.corp.bindu.com/artifactory',
                    credentialsId: 'Artifactory-token',
                    bypassProxy: true,
                    timeout: 300
                )
            }

        }
        stage('Artifacts Upload'){
            steps{
                rtupload(
                    serverId:"jfArtifactory" ,
                     spec: '''{
                        "files": [
                            {
                                "pattern": "*.war" ,
                                "target": "testjfrog-libs-snapshot-local"
                            }
                        ]
                     }''',
                )
            }

        }
        stage('Publish build info'){
            steps{
                rtPublishBuildInfo (
                    serverId: "jfArtifactory",
                    buildNumber: "${currentBuild.number}"
                )
            }

        }
    }
}
