pipeline{
 agent any
 stages{
   stage('checkout'){
      steps{
         git url: 'https://github.com/bandihimabindu/Devops.git' branch: 'main'
         sh 'echo passed'
      }
   }
  stage('build and test'){
    steps{
        sh 'cd DEVOPSPROJECT && mvn clean package'
        sh 'ls -ltr'
    }

  }
  stage('static code analysis'){

  }
  stage('build and push image'){
    environment{
        docker_image: image-1
        docker-hub-password: 
        docker-hub-user:
        }
    steps{
        docker build -t ${docker_image} .
        docker login -u ${docker-hub-user} -p ${docker-hub-password}
        docker push ${docker_image}
    }

  }
  stage('deployment'){


  }
 }
}



## 2 (shamanth anna project)

pipeline{
    agent {
        kubernetes{
            yaml '''
              spec:
                containers:
                - name: jdk
                  image: akscontainerregistry01s9s9s.azurecr.io/javaimage:latest
                  command:
                  - cat
                  tty: true
                '''
        }
    }
    /* tools*/
    stages{
        stage('Declarative: Checkout SCM'){
            steps{

            }
        }
        stage('Git Checkout'){
            steps{

                git credentialsId: 'skc-pat'' url: 'https://github.com/BandiHimabindu/Devops

            }

          
        }
        stage("Maven Build"){
            steps{
                container('jdk'){
                    sh 'mvn clean install'
                }
            }
       }
        stage('SonarQube Analysis'){
            environment {
                SCANNER_HOME = TOOL 'SonarQudescanner'
                PROJECT_NAME = "Test-Project"
            }
            steps{
                container('jdk'){
                    withSonarQubeEnv('SonarQube'){
                        echo "$SCANNER_HOME"
                        sh '''$SCANNER_HOME/bin/sonar-scanner -X -Dsonar.java.binaries=. \
                        -Dsonar.projectkey=$PROJECT_NAME -Dsonar.language=java \
                        -Dsonar.java.source=1.11 \
                        -Dsonar.sources=.'''
                    }
                }
            }

        }
        stage('Quality Gate'){
            steps{


                timeout(time: 5, unit: 'MINUTES'){
                    waitForQualityGate abortPipeline: false
                }
            }

        }
        stage('Artifactory Server'){
            steps{
                rtServer (
                    id: "jfArtifactory",
                    url: 'http://artifactory.corp.bindu.com/artifactory',
                    credentialsId: 'Artifactory-token',
                    bypassProxy: true,
                    timeout: 300
                )
            }

        }
        stage('Artifacts Upload'){
            steps{
                rtupload(
                    serverId:"jfArtifactory" ,
                     spec: '''{
                        "files": [
                            {
                                "pattern": "*.war" ,
                                "target": "testjfrog-libs-snapshot-local"
                            }
                        ]
                     }''',
                )
            }

        }
        stage('Publish build info'){
            steps{
                rtPublishBuildInfo (
                    serverId: "jfArtifactory",
                    buildNumber: "${currentBuild.number}"
                )
            }

        }
    }
}

## 3
pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://34.201.116.83:9000"
      }
      steps {
          withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "iam-veeramalla"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "abhishek.xyz@gmail.com"
                    git config user.name "Abhishek Veeramalla"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}

## 4

pipeline {
    agent any
    stages{
        stage("checkout"){
         git credentialsId: 
         url : https://github.com/himabindu
         branch: main
        }
        stage(" maven build"){
          sh 'maven clean install'
        }
        stage('source code analysis'){
          sonar url : "http://34.201.116.83:9000"
        }
        stage("docker build"){
          docker image build -t image .
          docekr login
          docekr push hima/image
        }
        stage(){
          steps{
            script{
              
            }
          }
        }

    }

}
